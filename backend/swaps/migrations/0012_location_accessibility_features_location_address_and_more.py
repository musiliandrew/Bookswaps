# Generated by Django 5.2 on 2025-06-27 04:52

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('swaps', '0011_alter_notification_type'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='location',
            name='accessibility_features',
            field=models.JSONField(db_comment='Accessibility features available', default=list),
        ),
        migrations.AddField(
            model_name='location',
            name='address',
            field=models.TextField(blank=True, db_comment='Full address of the location', null=True),
        ),
        migrations.AddField(
            model_name='location',
            name='amenities',
            field=models.JSONField(db_comment='Available amenities (wifi, parking, etc.)', default=list),
        ),
        migrations.AddField(
            model_name='location',
            name='opening_hours',
            field=models.JSONField(blank=True, db_comment='Opening hours in JSON format', null=True),
        ),
        migrations.AddField(
            model_name='location',
            name='phone',
            field=models.CharField(blank=True, db_comment='Contact phone number', max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='location',
            name='safety_score',
            field=models.FloatField(db_comment='Safety rating of the location (0-5)', default=5.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='location',
            name='usage_count',
            field=models.PositiveIntegerField(db_comment='Number of times this location has been used for swaps', default=0),
        ),
        migrations.AddField(
            model_name='location',
            name='website',
            field=models.URLField(blank=True, db_comment='Website URL', null=True),
        ),
        migrations.AddField(
            model_name='swap',
            name='extension_approved',
            field=models.BooleanField(db_comment='Whether owner approved the extension', default=False),
        ),
        migrations.AddField(
            model_name='swap',
            name='extension_days',
            field=models.PositiveIntegerField(db_comment='Number of extension days requested', default=0),
        ),
        migrations.AddField(
            model_name='swap',
            name='extension_reason',
            field=models.TextField(blank=True, db_comment='Reason for extension request', null=True),
        ),
        migrations.AddField(
            model_name='swap',
            name='extension_requested',
            field=models.BooleanField(db_comment='Whether receiver has requested extension', default=False),
        ),
        migrations.AddField(
            model_name='swap',
            name='is_borrowing',
            field=models.BooleanField(db_comment='True if this is a borrowing swap (temporary), False if permanent exchange', default=False),
        ),
        migrations.AddField(
            model_name='swap',
            name='location_verified',
            field=models.BooleanField(db_comment='Whether both parties are at the meetup location', default=False),
        ),
        migrations.AddField(
            model_name='swap',
            name='qr_code_data',
            field=models.TextField(blank=True, db_comment='Encrypted QR code data for verification', null=True),
        ),
        migrations.AddField(
            model_name='swap',
            name='return_deadline',
            field=models.DateTimeField(blank=True, db_comment='When the book should be returned (for borrowing swaps)', null=True),
        ),
        migrations.AlterField(
            model_name='location',
            name='type',
            field=models.CharField(choices=[('library', 'Library'), ('cafe', 'Cafe'), ('bookstore', 'Bookstore'), ('park', 'Park'), ('hotel', 'Hotel Lobby'), ('school', 'School/University'), ('mall', 'Shopping Mall'), ('restaurant', 'Restaurant'), ('community_center', 'Community Center'), ('train_station', 'Train Station'), ('airport', 'Airport'), ('other', 'Other')], db_comment='Type of exchange spot', max_length=50),
        ),
        migrations.CreateModel(
            name='ExtensionRequest',
            fields=[
                ('extension_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('days_requested', models.PositiveIntegerField(db_comment='Number of additional days requested')),
                ('reason', models.TextField(db_comment='Reason for the extension request')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied'), ('expired', 'Expired')], db_comment='Status of the extension request', default='pending', max_length=20)),
                ('owner_response', models.TextField(blank=True, db_comment='Response from the book owner', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='When extension was requested')),
                ('responded_at', models.DateTimeField(blank=True, db_comment='When owner responded to the request', null=True)),
                ('requester', models.ForeignKey(db_comment='User requesting the extension', on_delete=django.db.models.deletion.CASCADE, related_name='extension_requests', to=settings.AUTH_USER_MODEL)),
                ('swap', models.ForeignKey(db_comment='The swap this extension request is for', on_delete=django.db.models.deletion.CASCADE, related_name='extension_requests', to='swaps.swap')),
            ],
            options={
                'db_table': 'extension_requests',
                'db_table_comment': 'Manages extension requests for borrowing swaps',
                'indexes': [models.Index(fields=['swap'], name='extension_r_swap_id_1e9d11_idx'), models.Index(fields=['requester'], name='extension_r_request_e6d055_idx'), models.Index(fields=['status'], name='extension_r_status_a1d20d_idx'), models.Index(fields=['created_at'], name='extension_r_created_9493b2_idx')],
            },
        ),
    ]
